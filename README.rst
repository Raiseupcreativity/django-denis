django-denis
==============

Denis helps you recoving accidentally deleted data from a django project

Rationale
---------

Humans make mistakes, sometimes they delete data accidentally from the ``django admin``
and you have to spend your afternoon recovering data from a db dump. Sometimes the human
is called Denis.

Requirements
------------

- Django ``1.8``

Installation
------------

- ``pip install django-denis``

Usage
-----

Given a ``queryset`` ``django-denis`` find what the ``django admin`` would delete,
dump it and create a shell script that would load the data back with ``loaddata``.

Here's an example session:

::

    $ python manage.py shell
    >>> from denis import Denis
    >>> from django.contrib.auth.models import User
    >>> User.objects.filter(pk=40182)
    []
    >>> qs = User.objects.using('backup').filter(pk=40182)
    >>> denis = Denis(qs, outdir='/tmp/user-40182-recovery', using='backup')
    >>> denis.dump()
    ^D
    sh /tmp/user-40182-recovery/denis.sh

The code above assumes a configuration entry called ``backup`` for ``DATABASES`` in ``settings.py``
that should point to a database containing the data you want to recover.

Be cautious
-----------

Please always test (and test again) recovery on a copy of your database so you can double check
that everything works fine before doing it again on your production db.

Of course we don't take any responsibility with this code. Use at your own risk!

More on the design
------------------

The original code of ``django-denis`` has been created ``on the fly`` for recovering
data accidentally deleted from the ``django admin``. The database that we were recovering
was a bit quirky with several ``peculiar`` so django dumped more stuff that needed.
One particularly funny quirk of the database in question was a model with forced db_table
that matched an autogenerated M2M one so the same data was dumped more than one time.

``django-denis`` is not particularly smart handling M2M fields where you possibly
are going to find the involved models dumped in the wrong order or simply not needed
because the data from the ``middle table`` have been already dumped in the models
containing the m2m field.

This leds to the two stage process of ``django-denis`` which let's you easily review
and modify what your loading before actually doing so.

So be warned you may need to edit the output shell script to do the right thing.
