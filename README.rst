django-denis
==============

Denis helps you recovering accidentally deleted data from a django project.

Rationale
---------

Humans make mistakes, sometimes they delete data accidentally from the ``django admin``
and you have to spend your afternoon recovering data from a db dump. Sometimes the human
is called Denis.

Requirements
------------

- Django ``1.8``

Installation
------------

- ``pip install django-denis``

Usage
-----

Given a queryset ``django-denis`` finds what the django admin would delete,
dumps it and creates a shell script to load the data back with ``loaddata``.

Here's an example session:

::

    $ python manage.py shell
    >>> from denis import Denis
    >>> from django.contrib.auth.models import User
    >>> User.objects.filter(pk=40182)
    []
    >>> qs = User.objects.using('backup').filter(pk=40182)
    >>> denis = Denis(qs, outdir='/tmp/user-40182-recovery', using='backup')
    >>> denis.dump()
    ^D
    sh /tmp/user-40182-recovery/denis.sh

The code above assumes a configuration entry called ``backup`` for ``DATABASES`` in ``settings.py``
that should point to a database containing the data you want to recover.

Be cautious
-----------

Please always test (and test again) recovery on a copy of your database so you can double check
that everything works fine before doing it on your production db.

Of course we don't take any responsibility with this code. Use at your own risk!

More on the design
------------------

The original code of ``django-denis`` has been created on the fly for recovering
accidentally deleted data from the ``django admin``. The database that we were recovering
was a bit quirky.
One particularly funny quirk of the database was a model with forced db_table
that matched an autogenerated M2M one. So the same data was dumped more than one time.

This leds to the two stage process of ``django-denis`` to let you easily review
and modify before actually loading the data.

So be warned you may need to edit the output shell script to do the right thing.
